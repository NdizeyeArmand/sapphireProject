{"version":3,"sources":["../../../../../../../src/lib/utils/application-commands/compute-differences/option/channelTypes.ts"],"names":["currentIndex"],"mappings":";;;;AAAA,SAAS,mBAA4D;AAGrE,IAAM,0BAA2H;AAAA,EAChI,CAAC,YAAY,SAAS,GAAG;AAAA,EACzB,CAAC,YAAY,UAAU,GAAG;AAAA,EAC1B,CAAC,YAAY,aAAa,GAAG;AAAA,EAC7B,CAAC,YAAY,iBAAiB,GAAG;AAAA,EACjC,CAAC,YAAY,kBAAkB,GAAG;AAAA,EAClC,CAAC,YAAY,YAAY,GAAG;AAAA,EAC5B,CAAC,YAAY,aAAa,GAAG;AAAA,EAC7B,CAAC,YAAY,eAAe,GAAG;AAAA,EAC/B,CAAC,YAAY,cAAc,GAAG;AAAA,EAC9B,CAAC,YAAY,UAAU,GAAG;AAAA,EAC1B,CAAC,YAAY,UAAU,GAAG;AAC3B;AAEA,IAAM,qBAAqB,wBAAC,SAAyB,yBAAyB,IAAI,qDAAvD;AAE3B,SAAS,yBAAyB,MAAoD;AACrF,SAAO,wBAAwB,IAAI,KAAK,mBAAmB,IAAI;AAChE;AAFS;AAIF,UAAU,kBAAkB;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,GAKiC;AAEhC,MAAI,CAAC,sBAAsB,UAAU,iBAAiB,QAAQ;AAC7D,UAAM;AAAA,MACL,KAAK,GAAG,QAAQ,YAAY,CAAC;AAAA,MAC7B,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,EACD,WAES,sBAAsB,UAAU,CAAC,iBAAiB,QAAQ;AAClE,UAAM;AAAA,MACL,KAAK,GAAG,QAAQ,YAAY,CAAC;AAAA,MAC7B,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,EACD,WAES,iBAAiB,QAAQ;AACjC,QAAI,QAAQ;AACZ,eAAW,eAAe,iBAAiB;AAC1C,YAAMA,gBAAe;AACrB,YAAM,sBAAsB,qBAAsBA,aAAY;AAC9D,UAAI,gBAAgB,qBAAqB;AACxC,cAAM;AAAA,UACL,KAAK,GAAG,QAAQA,aAAY,CAAC,kBAAkBA,aAAY;AAAA,UAC3D,UAAU,wBAAwB,SAAY,4BAA4B,yBAAyB,mBAAmB;AAAA,UACtH,UAAU,yBAAyB,WAAW;AAAA,QAC/C;AAAA,MACD;AAAA,IACD;AAGA,QAAI,QAAQ,qBAAsB,QAAQ;AACzC,UAAI;AACJ,cAAQ,cAAc,qBAAsB,KAAK,OAAO,QAAW;AAClE,cAAM;AAAA,UACL,KAAK,GAAG,QAAQ,KAAK,CAAC,kBAAkB,KAAK;AAAA,UAC7C,UAAU;AAAA,UACV,UAAU,yBAAyB,WAAW;AAAA,QAC/C;AAEA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAxDiB","sourcesContent":["import { ChannelType, type APIApplicationCommandChannelOption } from 'discord-api-types/v10';\nimport type { CommandDifference } from '../_shared';\n\nconst channelTypeToPrettyName: Record<Exclude<APIApplicationCommandChannelOption['channel_types'], undefined>[number], string> = {\n\t[ChannelType.GuildText]: 'text channel (type 0)',\n\t[ChannelType.GuildVoice]: 'voice channel (type 2)',\n\t[ChannelType.GuildCategory]: 'guild category (type 4)',\n\t[ChannelType.GuildAnnouncement]: 'guild announcement channel (type 5)',\n\t[ChannelType.AnnouncementThread]: 'guild announcement thread (type 10)',\n\t[ChannelType.PublicThread]: 'guild public thread (type 11)',\n\t[ChannelType.PrivateThread]: 'guild private thread (type 12)',\n\t[ChannelType.GuildStageVoice]: 'guild stage voice channel (type 13)',\n\t[ChannelType.GuildDirectory]: 'guild directory (type 14)',\n\t[ChannelType.GuildForum]: 'guild forum (type 15)',\n\t[ChannelType.GuildMedia]: 'guild media channel (type 16)'\n};\n\nconst unknownChannelType = (type: number): string => `unknown channel type (${type}); please contact Sapphire developers about this!`;\n\nfunction getChannelTypePrettyName(type: keyof typeof channelTypeToPrettyName): string {\n\treturn channelTypeToPrettyName[type] ?? unknownChannelType(type);\n}\n\nexport function* checkChannelTypes({\n\texistingChannelTypes,\n\tnewChannelTypes,\n\tcurrentIndex,\n\tkeyPath\n}: {\n\tcurrentIndex: number;\n\tkeyPath: (index: number) => string;\n\texistingChannelTypes?: APIApplicationCommandChannelOption['channel_types'];\n\tnewChannelTypes?: APIApplicationCommandChannelOption['channel_types'];\n}): Generator<CommandDifference> {\n\t// 0. No existing channel types and now we have channel types\n\tif (!existingChannelTypes?.length && newChannelTypes?.length) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.channel_types`,\n\t\t\toriginal: 'no channel types present',\n\t\t\texpected: 'channel types present'\n\t\t};\n\t}\n\t// 1. Existing channel types and now we have no channel types\n\telse if (existingChannelTypes?.length && !newChannelTypes?.length) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.channel_types`,\n\t\t\toriginal: 'channel types present',\n\t\t\texpected: 'no channel types present'\n\t\t};\n\t}\n\t// 2. Iterate over each channel type if we have any and see what's different\n\telse if (newChannelTypes?.length) {\n\t\tlet index = 0;\n\t\tfor (const channelType of newChannelTypes) {\n\t\t\tconst currentIndex = index++;\n\t\t\tconst existingChannelType = existingChannelTypes![currentIndex];\n\t\t\tif (channelType !== existingChannelType) {\n\t\t\t\tyield {\n\t\t\t\t\tkey: `${keyPath(currentIndex)}.channel_types[${currentIndex}]`,\n\t\t\t\t\toriginal: existingChannelType === undefined ? 'no channel type present' : getChannelTypePrettyName(existingChannelType),\n\t\t\t\t\texpected: getChannelTypePrettyName(channelType)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// If we went through less channel types than we previously had, report that\n\t\tif (index < existingChannelTypes!.length) {\n\t\t\tlet channelType: Exclude<APIApplicationCommandChannelOption['channel_types'], undefined>[number];\n\t\t\twhile ((channelType = existingChannelTypes![index]) !== undefined) {\n\t\t\t\tyield {\n\t\t\t\t\tkey: `${keyPath(index)}.channel_types[${index}]`,\n\t\t\t\t\texpected: 'no channel type present',\n\t\t\t\t\toriginal: getChannelTypePrettyName(channelType)\n\t\t\t\t};\n\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}